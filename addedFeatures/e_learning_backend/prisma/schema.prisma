generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id            Int                  @id @default(autoincrement())
  email         String               @unique
  password      String
  profile       Profile?             @relation("user profile")
  courses       Course[]
  problemSolved ContestProblemUser[]
}

model ContestProblemUser {
  id                   Int            @id @default(autoincrement())
  source_code          String
  programming_language String
  is_accepted          Boolean        @default(false)
  contest              Contest        @relation(fields: [contestId], references: [id])
  contestId            Int
  problem              ContestProblem @relation(fields: [problemId], references: [id])
  problemId            Int
  user                 User           @relation(fields: [userId], references: [id])
  userId               Int
}

model Contest {
  id             Int                  @id @default(autoincrement())
  name           String
  description    String?
  start_time     DateTime
  end_time       DateTime
  codingProblems ContestProblem[]
  ContestUser    ContestProblemUser[]
}

model ContestProblem {
  id                Int                  @id @default(autoincrement())
  problem_statement String
  inputoutput       ContestProblemIO[]
  contest           Contest              @relation(fields: [contestId], references: [id])
  contestId         Int
  userSolved        ContestProblemUser[]
}

model ContestProblemIO {
  id               Int            @id @default(autoincrement())
  is_public        Boolean        @default(true)
  input            String
  output           String
  contestProblem   ContestProblem @relation(fields: [contestProblemId], references: [id])
  contestProblemId Int
}

model Course {
  id                 Int      @id @default(autoincrement())
  name               String
  description        String?
  lessons            Lesson[]
  is_active          Boolean  @default(true)
  youtube_course_url String?
  is_youtube_course  Boolean  @default(true)
  owner_id           Int
  owner              User     @relation(fields: [owner_id], references: [id])
}

model Lesson {
  id                Int     @id @default(autoincrement())
  name              String
  youtube_video_url String?
  description       String?
  videoTitle        String?
  videoDescription  String?
  videoDuration     Int?
  videoThumbnail    String?
  courseId          Int
  course            Course  @relation(fields: [courseId], references: [id])
}

model Profile {
  id     Int     @id @default(autoincrement())
  userId Int     @unique
  user   User    @relation("user profile", fields: [userId], references: [id])
  name   String
  age    Int?
  bio    String?
}
